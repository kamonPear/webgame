import { Component, OnInit, Inject, PLATFORM_ID } from '@angular/core';
import { Router, RouterModule } from '@angular/router';
import { CommonModule, isPlatformBrowser } from '@angular/common';

// --- Import Angular Material Modules ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ---
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';

// --- Import Model User ---
import { User } from '../../model/api.model';

@Component({
  selector: 'app-navbar',
  standalone: true,
  imports: [
    RouterModule,
    CommonModule,
    MatButtonModule,
    MatIconModule,
    MatFormFieldModule,
    MatInputModule,
  ],
  templateUrl: './navbar.html',
  styleUrls: ['./navbar.scss'],
})
export class Navbar implements OnInit {
  public isProfileOpen = false;
  public isUserLoggedIn = false;
  public currentUser: User | null = null;
  public activeLink: string = '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥';

  // --- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Navbar (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å) ---
  public navLinks: { name: string; path: string }[] = [];

  constructor(private router: Router, @Inject(PLATFORM_ID) private platformId: Object) {}

  ngOnInit(): void {
    if (isPlatformBrowser(this.platformId)) {
      this.checkLoginStatus();
    }
  }

  checkLoginStatus(): void {
    const token = localStorage.getItem('authToken');
    const userDataString = localStorage.getItem('userData');

    this.isUserLoggedIn = !!token && !!userDataString; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô boolean

    if (this.isUserLoggedIn && userDataString) {
      this.currentUser = JSON.parse(userDataString);
    } else {
      this.currentUser = null;
    }

    // *** üéâ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà 1: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ***
    this.updateNavLinks();
  }

  // *** ‚ú® ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï navLinks ***
  updateNavLinks(): void {
    if (this.isUserLoggedIn) {
      // ‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
      this.navLinks = [
        { name: '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', path: '/main' },
        { name: '‡∏à‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ', path: '/bestsellers' },
        { name: '‡πÄ‡∏Å‡∏°', path: '/gametype' },
        { name: '‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô/‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠', path: '/addwallet' },
      ];
    } else {
      // ‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô)
      this.navLinks = [
        { name: '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', path: '/main' },
        { name: '‡∏à‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ', path: '/bestsellers' },
        { name: '‡πÄ‡∏Å‡∏°', path: '/gametype' },
      ];
    }
  }

  toggleProfileSidebar(): void {
    this.isProfileOpen = !this.isProfileOpen;
  }

  setActiveLink(linkName: string): void {
    this.activeLink = linkName;
  }

  logout(): void {
    if (isPlatformBrowser(this.platformId)) {
      localStorage.removeItem('authToken');
      localStorage.removeItem('userData');
    }

    this.isUserLoggedIn = false;
    this.currentUser = null;
    this.isProfileOpen = false;

    // *** üéâ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà 3: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ***
    this.updateNavLinks();

    this.router.navigate(['/login']);
  }
}
